const express = require('express'),
  router = express.Router(),
  Sp = require('../models/chitietSpModel'),
  LoaiSP = require('../models/tenSpModel'),
  multer = require('multer')
var myMDBlog = require('../models/blog.model')
const checkAuth = require('../controllers/checkAuth'),
  slugify = require('slugify'),
  LinkKien = require('../models/LinkKienModel'),
  LoaiLinkKien = require('../models/LoaiLinhKien'),
  Notify = require('../models/NotifyModel'),
  DanhGia = require('../models/DanhGiaModel'),
  { linkSync: linkSync } = require('fs'),
  moment = require('moment'),
  momenttimezone = require('moment-timezone'),
  storage = multer.memoryStorage(),
  upload = multer({ storage: storage })
router.get('/mess', async (req, res) => {
  res.render('test')
}),
  router.post('/postloaisp', async (req, res) => {
    try {
      const {
          name: name,
          manhinh: manhinh,
          chip: chip,
          ram: ram,
          dungluong: dungluong,
          camera: camera,
          pinsac: pinsac,
          hang: hang,
          congsac: congsac,
          thongtin: thongtin
        } = req.body,
        tensp = new LoaiSP.TenSP({
          name: name,
          manhinh: manhinh,
          chip: chip,
          ram: ram,
          dungluong: dungluong,
          camera: camera,
          pinsac: pinsac,
          hang: hang,
          congsac: congsac,
          thongtin: thongtin
        })
      await tensp.save(), res.redirect('/main')
    } catch (error) {
      console.error(error),
        res.status(500).json({ message: `Đã xảy ra lỗi: ${error}` })
    }
  }),
  router.post('/putloaisp/:id', async (req, res) => {
    try {
      const id = req.params.id,
        {
          name: name,
          manhinh: manhinh,
          chip: chip,
          ram: ram,
          dungluong: dungluong,
          camera: camera,
          pinsac: pinsac,
          hang: hang,
          congsac: congsac,
          thongtin: thongtin
        } = req.body
      await LoaiSP.TenSP.findByIdAndUpdate(id, {
        name: name,
        manhinh: manhinh,
        chip: chip,
        ram: ram,
        dungluong: dungluong,
        camera: camera,
        pinsac: pinsac,
        hang: hang,
        congsac: congsac,
        thongtin: thongtin
      }),
        res.redirect('/main')
    } catch (error) {
      console.error(error),
        res.status(500).json({ message: `Đã xảy ra lỗi: ${error}` })
    }
  }),
  router.get('/editloaisp/:id', async (req, res) => {
    try {
      const id = req.params.id,
        tensp = await LoaiSP.TenSP.findById(id)
      res.render('editloaisp', { tensp: tensp })
    } catch (error) {
      console.error(error),
        res.status(500).json({ message: `Đã xảy ra lỗi: ${error}` })
    }
  }),
  router.get('/addloaisp', async (req, res) => {
    try {
      res.render('addloaisp')
    } catch (error) {
      console.error(error),
        res.status(500).json({ message: `Đã xảy ra lỗi: ${error}` })
    }
  }),
  router.get('/addsp/:idloaisp', async (req, res) => {
    try {
      const idloaisp = req.params.idloaisp
      res.render('add', { idloaisp: idloaisp })
    } catch (error) {
      console.error(error),
        res.status(500).json({ message: `Đã xảy ra lỗi: ${error}` })
    }
  }),
  router.get('/main', checkAuth, async (req, res) => {
    try {
      let listloai = await LoaiSP.TenSP.find(),
        listblog = await myMDBlog.blogModel.find()
      const loailinhkien = await LoaiLinkKien.loailinkkien.find()
      res.render('home', {
        listloai: listloai,
        listblog: listblog,
        loailinhkien: loailinhkien
      })
    } catch (error) {
      console.log(`lỗi: ${error}`)
    }
  }),
  router.get('/', async (req, res) => {
    try {
      const allsp = await LoaiSP.TenSP.find().populate('chitietsp'),
        listBl = await myMDBlog.blogModel.find().sort({ _id: -1 }),
        danhgia = await DanhGia.danhgia.find(),
        sp = await Promise.all(
          allsp.map(async s => {
            let img
            return (
              'iPhone 13 Pro Max' === s.name && (img = '/img/iphone13.png'),
              'iPhone 12 Pro Max' === s.name && (img = '/img/iphone12.jpg'),
              'iPhone 14 Pro Max' === s.name && (img = '/img/iphone14.png'),
              'iPhone 11 Pro Max' === s.name && (img = '/img/iphone11.jpg'),
              { id: s._id, name: s.name, img: img }
            )
          })
        ),
        tenspjson2 = await Promise.all(
          allsp.map(async tensp => {
            if (
              'iPhone 13 Pro Max' === tensp.name ||
              'iPhone 14 Pro Max' === tensp.name
            ) {
              const chitietspJson = await Promise.all(
                tensp.chitietsp.map(async chitietsp => ({
                  id: chitietsp._id,
                  name: chitietsp.name,
                  noidung: chitietsp.content,
                  price: chitietsp.price,
                  image: chitietsp.image
                }))
              )
              return {
                id: tensp._id,
                name: tensp.name,
                somay: tensp.chitietsp.length,
                chitietsp: chitietspJson
              }
            }
            return null
          })
        ).then(results => results.filter(result => null !== result)),
        tenspjson1 = await Promise.all(
          allsp.map(async tensp => {
            if (
              'iPhone 12 Pro Max' === tensp.name ||
              'iPhone 11 Pro Max' === tensp.name
            ) {
              const chitietspJson1 = await Promise.all(
                tensp.chitietsp.map(async chitietsp => ({
                  id: chitietsp._id,
                  name: chitietsp.name,
                  noidung: chitietsp.content,
                  price: chitietsp.price,
                  image: chitietsp.image
                }))
              )
              return {
                id1: tensp._id,
                name1: tensp.name,
                somay1: tensp.chitietsp.length,
                chitietsp1: chitietspJson1
              }
            }
            return null
          })
        ).then(results => results.filter(result => null !== result)),
        danhgiaIsReadTrue = danhgia
          .filter(d => !0 === d.isRead)
          .map(d => ({
            _id: d._id,
            tenkhach: d.tenkhach,
            content: d.content,
            rating: d.rating
          }))
      res.render('index', {
        allsp: allsp,
        tenspjson1: tenspjson1,
        tenspjson2: tenspjson2,
        listBl: listBl,
        danhgiaIsReadTrue: danhgiaIsReadTrue,
        sp: sp
      })
    } catch (error) {
      console.error(error),
        res.status(500).json({ message: `Đã xảy ra lỗi: ${error}` })
    }
  }),
  router.post('/deleteloaisp/:id', async (req, res) => {
    try {
      const id = req.params.id,
        xam = await LoaiSP.TenSP.findById(id)
      xam || res.status(403).json({ message: 'khong tim thay sp' }),
        await Promise.all(
          xam.chitietsp.map(async chitietsp => {
            await Sp.ChitietSp.findByIdAndDelete(chitietsp._id)
          })
        ),
        await LoaiSP.TenSP.deleteOne({ _id: id }),
        res.redirect('/main')
    } catch (error) {
      console.error(error),
        res.status(500).json({ message: `Đã xảy ra lỗi: ${error}` })
    }
  }),
  router.post(
    '/postchitietsp/:id',
    upload.single('image'),
    async (req, res) => {
      try {
        const id = req.params.id,
          { name: name, content: content, price: price } = req.body,
          image = req.file.buffer.toString('base64'),
          chitietsp = new Sp.ChitietSp({
            image: image,
            name: name,
            content: content,
            price: price
          }),
          tensp = await LoaiSP.TenSP.findById(id)
        tensp || res.status(403).json({ message: 'khong tim thay tensp' }),
          (chitietsp.idloaisp = id),
          (chitietsp.loaisp = tensp.name),
          tensp.chitietsp.push(chitietsp._id),
          await chitietsp.save(),
          await tensp.save(),
          res.redirect('/main')
      } catch (error) {
        console.error(error),
          res.status(500).json({ message: `Đã xảy ra lỗi: ${error}` })
      }
    }
  ),
  router.get('/getchitietsp/:idloaisp', async (req, res) => {
    try {
      const idloaisp = req.params.idloaisp,
        loaisp = await LoaiSP.TenSP.findById(idloaisp)
      if (!loaisp)
        return res.status(404).json({ message: 'Không tìm thấy loại sản phẩm' })
      const chitiet = await Promise.all(
        loaisp.chitietsp.map(async ct => {
          const chitietsp = await Sp.ChitietSp.findById(ct._id)
          return {
            _id: chitietsp._id,
            image: chitietsp.image,
            name: chitietsp.name,
            content: chitietsp.content,
            price: chitietsp.price
          }
        })
      )
      res.render('chitietsp', { chitiet: chitiet, idloaisp: idloaisp })
    } catch (error) {
      console.error(error),
        res.status(500).json({ message: `Đã xảy ra lỗi: ${error}` })
    }
  }),
  router.get('/getspchitiet/:nameloaisp', async (req, res) => {
    try {
      const nameloaisp = req.params.nameloaisp.replace(/-/g, ' '),
        loaisp = await LoaiSP.TenSP.findOne({ name: nameloaisp }),
        allsp = await LoaiSP.TenSP.find().populate('chitietsp')
      if (!loaisp)
        return res.status(404).json({ message: 'Không tìm thấy loại sản phẩm' })
      const sp = await Promise.all(
          allsp.map(async s => {
            let img
            return (
              'iPhone 13 Pro Max' === s.name &&
                (img = 'https://giahuystore.com/img/iphone13.png'),
              'iPhone 12 Pro Max' === s.name &&
                (img = 'https://giahuystore.com/img/iphone12.jpg'),
              'iPhone 14 Pro Max' === s.name &&
                (img = 'https://giahuystore.com/img/iphone14.png'),
              'iPhone 11 Pro Max' === s.name &&
                (img = 'https://giahuystore.com/img/iphone11.jpg'),
              { id: s._id, name: s.name, img: img }
            )
          })
        ),
        chitiet = await Promise.all(
          loaisp.chitietsp.map(async ct => {
            const chitietsp = await Sp.ChitietSp.findById(ct._id)
            return {
              _id: chitietsp._id,
              image: chitietsp.image,
              name: chitietsp.name,
              content: chitietsp.content,
              price: chitietsp.price
            }
          })
        )
      res.render('full', {
        chitiet: chitiet,
        nameloaisp: nameloaisp,
        allsp: allsp,
        sp: sp
      })
    } catch (error) {
      console.error(error),
        res.status(500).json({ message: `Đã xảy ra lỗi: ${error}` })
    }
  }),
  router.get('/getchitiet/:namesp/:nameloai', async (req, res) => {
    try {
      const namesp = req.params.namesp.replace(/-/g, ' '),
        nameloai = req.params.nameloai.replace(/-/g, ' '),
        sp = await Sp.ChitietSp.findOne({ name: namesp }),
        listBl = await myMDBlog.blogModel.find().sort({ _id: -1 }),
        allsp = await LoaiSP.TenSP.find().populate('chitietsp')
      if (!sp)
        return res.status(404).json({ message: 'Không tìm thấy sản phẩm' })
      const loai = await LoaiSP.TenSP.findOne({ name: nameloai })
      if (!loai)
        return res.status(404).json({ message: 'Không tìm thấy loại sản phẩm' })
      const spjson = {
          image: sp.image,
          name: sp.name,
          price: sp.price,
          content: sp.content,
          manhinh: loai.manhinh,
          chip: loai.chip,
          ram: loai.ram,
          dungluong: loai.dungluong,
          camera: loai.camera,
          pinsac: loai.pinsac,
          congsac: loai.congsac,
          hang: loai.hang,
          thongtin: loai.thongtin
        },
        mangloai = await Promise.all(
          sp.chitiet.map(async mang => ({ name: mang.name, price: mang.price }))
        ),
        mangjson = { spjson: spjson, mangloai: mangloai }
      res.render('detail', { mangjson: mangjson, allsp: allsp, listBl: listBl })
    } catch (error) {
      console.error(error),
        res.status(500).json({ message: `Đã xảy ra lỗi: ${error}` })
    }
  }),
  router.post('/postloaichitiet/:chitietspid', async (req, res) => {
    try {
      const chitietspid = req.params.chitietspid,
        { name: name, price: price } = req.body,
        chitietsp = await Sp.ChitietSp.findById(chitietspid)
      chitietsp.chitiet.push({ name: name, price: price }),
        await chitietsp.save(),
        res.redirect(`/getloaichitiet/${chitietspid}`)
    } catch (error) {
      console.error(error),
        res.status(500).json({ message: `Đã xảy ra lỗi: ${error}` })
    }
  }),
  router.post('/editloaichitiet/:chitietspid/:id', async (req, res) => {
    try {
      const chitietspid = req.params.chitietspid,
        { name: name, price: price } = req.body,
        chitietsp = await Sp.ChitietSp.findById(chitietspid),
        id = req.params.id,
        index = chitietsp.chitiet.findIndex(item => item._id.toString() === id)
      if (-1 === index)
        return res
          .status(404)
          .json({ message: 'Không tìm thấy id trong danh sách chitiet' })
      ;(chitietsp.chitiet[index].name = name),
        (chitietsp.chitiet[index].price = price),
        await chitietsp.save(),
        res.redirect(`/getloaichitiet/${chitietspid}`)
    } catch (error) {
      console.error(error),
        res.status(500).json({ message: `Đã xảy ra lỗi: ${error}` })
    }
  }),
  router.get('/geteditloaichitiet/:chitietspid/:id', async (req, res) => {
    try {
      const chitietspid = req.params.chitietspid,
        id = req.params.id,
        chitietsp = await Sp.ChitietSp.findById(chitietspid),
        index = chitietsp.chitiet.findIndex(item => item._id.toString() === id),
        json = {
          name: chitietsp.chitiet[index].name,
          price: chitietsp.chitiet[index].price
        }
      res.render('editloaichitiet', {
        chitietspid: chitietspid,
        id: id,
        json: json
      })
    } catch (error) {
      console.error(error),
        res.status(500).json({ message: `Đã xảy ra lỗi: ${error}` })
    }
  }),
  router.post('/deleteloaichitiet/:chitietspid/:id', async (req, res) => {
    try {
      const chitietspid = req.params.chitietspid,
        id = req.params.id,
        chitietsp = await Sp.ChitietSp.findById(chitietspid),
        updatedChitiet = chitietsp.chitiet.filter(item => item._id != id)
      ;(chitietsp.chitiet = updatedChitiet),
        await chitietsp.save(),
        res.redirect(`/getloaichitiet/${chitietspid}`)
    } catch (error) {
      console.error(error),
        res.status(500).json({ message: `Đã xảy ra lỗi: ${error}` })
    }
  }),
  router.get('/getaddloaichitiet/:chitietspid', async (req, res) => {
    try {
      const chitietspid = req.params.chitietspid
      res.render('addloaichitiet', { chitietspid: chitietspid })
    } catch (error) {
      console.error(error),
        res.status(500).json({ message: `Đã xảy ra lỗi: ${error}` })
    }
  }),
  router.get('/getloaichitiet/:idsp', async (req, res) => {
    try {
      const idsp = req.params.idsp,
        sp = await Sp.ChitietSp.findById(idsp)
      if (!sp)
        return res.status(404).json({ message: 'Không tìm thấy sản phẩm' })
      const mangloai = await Promise.all(
        sp.chitiet.map(async mang => ({
          _id: mang._id,
          name: mang.name,
          price: mang.price
        }))
      )
      res.render('loaichitietsp', { mangloai: mangloai, idsp: idsp })
    } catch (error) {
      console.error(error),
        res.status(500).json({ message: `Đã xảy ra lỗi: ${error}` })
    }
  }),
  router.post('/deletechitietsp/:id', async (req, res) => {
    try {
      const id = req.params.id,
        chitietsp = await Sp.ChitietSp.findById(id)
      if (!chitietsp)
        return res
          .status(404)
          .json({ message: 'Không tìm thấy chi tiết sản phẩm' })
      const loaisp = await LoaiSP.TenSP.findById(chitietsp.idloaisp)
      ;(loaisp.chitietsp = loaisp.chitietsp.filter(
        chitiet => chitiet.toString() !== id
      )),
        await loaisp.save(),
        await Sp.ChitietSp.deleteOne({ _id: id }),
        res.redirect('/main')
    } catch (error) {
      console.error(error),
        res.status(500).json({ message: `Đã xảy ra lỗi: ${error}` })
    }
  }),
  router.post('/updatechitietsp/:id', async (req, res) => {
    try {
      const id = req.params.id,
        { name: name, content: content, price: price } = req.body,
        chitietsp = await Sp.ChitietSp.findById(id)
      if (!chitietsp)
        return res
          .status(404)
          .json({ message: 'Không tìm thấy chi tiết sản phẩm' })
      ;(chitietsp.content = content),
        (chitietsp.price = price),
        (chitietsp.name = name),
        await chitietsp.save(),
        res.redirect('/main')
    } catch (error) {
      console.error(error),
        res.status(500).json({ message: `Đã xảy ra lỗi: ${error}` })
    }
  }),
  router.get('/editsp/:id', async (req, res) => {
    try {
      const id = req.params.id,
        sp = await Sp.ChitietSp.findById(id)
      res.render('edit', { sp: sp })
    } catch (error) {
      console.error(error),
        res.status(500).json({ message: `Đã xảy ra lỗi: ${error}` })
    }
  }),
  router.get('/suachua', async (req, res) => {
    try {
      const loailinhkien = await LoaiLinkKien.loailinkkien
          .find()
          .populate('linhkien'),
        loailinhkienjson = await Promise.all(
          loailinhkien.map(async loai => {
            const linkkienJson = await Promise.all(
              loai.linhkien.map(async lk => ({
                id: lk._id,
                name: lk.name,
                price: lk.price,
                image: lk.image
              }))
            )
            return { id: loai._id, name: loai.name, linkkienJson: linkkienJson }
          })
        )
      res.render('linkkien', { loailinhkienjson: loailinhkienjson })
    } catch (error) {
      console.error(error),
        res.status(500).json({ message: `Đã xảy ra lỗi: ${error}` })
    }
  }),
  router.post(
    '/postlinkkien/:idloailinkkien',
    upload.single('image'),
    async (req, res) => {
      try {
        const { name: name, price: price } = req.body,
          idloailinkkien = req.params.idloailinkkien,
          loailinhkien = await LoaiLinkKien.loailinkkien.findById(
            idloailinkkien
          ),
          image = req.file.buffer.toString('base64'),
          linkkien = new LinkKien.linkkien({
            name: name,
            price: price,
            image: image
          })
        ;(linkkien.loailinhkien = loailinhkien._id),
          (linkkien.loai = loailinhkien.name),
          loailinhkien.linhkien.push(linkkien._id),
          await linkkien.save(),
          await loailinhkien.save(),
          res.redirect(`/linhkien/${idloailinkkien}`)
      } catch (error) {
        console.error(error),
          res.status(500).json({ message: `Đã xảy ra lỗi: ${error}` })
      }
    }
  ),
  router.get('/addlinhkien/:id', async (req, res) => {
    try {
      const id = req.params.id
      res.render('addlinhkien', { id: id })
    } catch (error) {
      console.error(error),
        res.status(500).json({ message: `Đã xảy ra lỗi: ${error}` })
    }
  }),
  router.get('/editlinhkien/:id', async (req, res) => {
    try {
      const id = req.params.id,
        linhkien = await LinkKien.linkkien.findById(id)
      res.render('editlinhkien', { linhkien: linhkien, id: id })
    } catch (error) {
      console.error(error),
        res.status(500).json({ message: `Đã xảy ra lỗi: ${error}` })
    }
  }),
  router.post('/putlinhkien/:id', async (req, res) => {
    try {
      const id = req.params.id,
        { name: name, price: price } = req.body,
        linhkien = await LinkKien.linkkien.findById(id)
      ;(linhkien.name = name),
        (linhkien.price = price),
        await linhkien.save(),
        res.redirect(`/linhkien/${linhkien.loailinhkien}`)
    } catch (error) {
      console.error(error),
        res.status(500).json({ message: `Đã xảy ra lỗi: ${error}` })
    }
  }),
  router.post('/deletelk/:id', async (req, res) => {
    try {
      const id = req.params.id,
        linhkien = await LinkKien.linkkien.findById(id),
        loailinhkien = await LoaiLinkKien.loailinkkien.findById(
          linhkien.loailinhkien
        )
      ;(loailinhkien.linhkien = loailinhkien.linhkien.filter(
        chitiet => chitiet.toString() !== id
      )),
        await loailinhkien.save(),
        await LinkKien.linkkien.deleteOne({ _id: id }),
        res.redirect(`/linhkien/${linhkien.loailinhkien}`)
    } catch (error) {
      console.error(error),
        res.status(500).json({ message: `Đã xảy ra lỗi: ${error}` })
    }
  }),
  router.post('/postloailinkien', async (req, res) => {
    try {
      const { name: name } = req.body,
        loailinkkien = new LoaiLinkKien.loailinkkien({ name: name })
      await loailinkkien.save(), res.redirect('/main')
    } catch (error) {
      console.error(error),
        res.status(500).json({ message: `Đã xảy ra lỗi: ${error}` })
    }
  }),
  router.post('/putloailk/:id', async (req, res) => {
    try {
      const id = req.params.id,
        { name: name } = req.body,
        loailinhkien = await LoaiLinkKien.loailinkkien.findById(id)
      ;(loailinhkien.name = name),
        await loailinhkien.save(),
        res.redirect('/main')
    } catch (error) {
      console.error(error),
        res.status(500).json({ message: `Đã xảy ra lỗi: ${error}` })
    }
  }),
  router.post('/deleteloailk/:id', async (req, res) => {
    try {
      const id = req.params.id,
        loailinhkien = await LoaiLinkKien.loailinkkien.findById(id)
      Promise.all(
        loailinhkien.linhkien.map(async linhkien => {
          await LinkKien.linkkien.findByIdAndDelete(linhkien._id)
        })
      ),
        await LoaiLinkKien.loailinkkien.deleteOne({ _id: id }),
        res.redirect('/main')
    } catch (error) {
      console.error(error),
        res.status(500).json({ message: `Đã xảy ra lỗi: ${error}` })
    }
  }),
  router.get('/addloailk', async (req, res) => {
    try {
      res.render('addloailinhkien')
    } catch (error) {
      console.error(error),
        res.status(500).json({ message: `Đã xảy ra lỗi: ${error}` })
    }
  }),
  router.get('/editloailk/:id', async (req, res) => {
    try {
      const id = req.params.id,
        loailinhkien = await LoaiLinkKien.loailinkkien.findById(id)
      res.render('editloailinhkien', { id: id, loailinhkien: loailinhkien })
    } catch (error) {
      console.error(error),
        res.status(500).json({ message: `Đã xảy ra lỗi: ${error}` })
    }
  }),
  router.get('/linhkien/:id', async (req, res) => {
    try {
      const id = req.params.id,
        loailinhkien = await LoaiLinkKien.loailinkkien.findById(id),
        linhkienjson = await Promise.all(
          loailinhkien.linhkien.map(async lk => {
            const linhkien = await LinkKien.linkkien.findById(lk._id)
            return {
              _id: linhkien.id,
              name: linhkien.name,
              price: linhkien.price,
              image: linhkien.image,
              loai: linhkien.loai
            }
          })
        )
      res.render('linhkienmain', { linhkienjson: linhkienjson, id: id })
    } catch (error) {
      console.error(error),
        res.status(500).json({ message: `Đã xảy ra lỗi: ${error}` })
    }
  }),
  router.get('/xemlinhkien/:id', async (req, res) => {
    try {
      const id = req.params.id,
        loailinhkien = await LoaiLinkKien.loailinkkien.findById(id),
        linhkienjson = await Promise.all(
          loailinhkien.linhkien.map(async lk => {
            const linhkien = await LinkKien.linkkien.findById(lk._id)
            return {
              _id: linhkien.id,
              name: linhkien.name,
              price: linhkien.price,
              image: linhkien.image,
              loai: linhkien.loai
            }
          })
        )
      res.render('xemlinhkien', { linhkienjson: linhkienjson, id: id })
    } catch (error) {
      console.error(error),
        res.status(500).json({ message: `Đã xảy ra lỗi: ${error}` })
    }
  }),
  router.get('/muangay/:idsp', async (req, res) => {
    try {
      const idsp = req.params.idsp,
        sp = await Sp.ChitietSp.findById(idsp),
        spjson = { name: sp.name, price: sp.price }
      res.render('formmua', { spjson: spjson })
    } catch (error) {
      console.error(error),
        res.status(500).json({ message: `Đã xảy ra lỗi: ${error}` })
    }
  }),
  router.post('/postnotify', async (req, res) => {
    try {
      const {
          tenkhach: tenkhach,
          phone: phone,
          email: email,
          tensp: tensp,
          price: price,
          address: address
        } = req.body,
        vietnamTime = momenttimezone().toDate(),
        notify = new Notify.notify({
          tenkhach: tenkhach,
          phone: phone,
          email: email,
          tensp: tensp,
          price: price,
          address: address
        }),
        sp = await Sp.ChitietSp.findOne({ name: tensp })
      ;(notify.idsp = sp._id),
        (notify.date = vietnamTime),
        await notify.save(),
        setTimeout(() => {
          res.redirect('/')
        }, 3e3)
    } catch (error) {
      console.error(error),
        res.status(500).json({ message: `Đã xảy ra lỗi: ${error}` })
    }
  }),
  router.post('/duyet/:idnotify', async (req, res) => {
    try {
      const idnotify = req.params.idnotify,
        notify = await Notify.notify.findById(idnotify)
      ;(notify.isRead = !0), await notify.save(), res.redirect('/donhang')
    } catch (error) {
      console.error(error),
        res.status(500).json({ message: `Đã xảy ra lỗi: ${error}` })
    }
  }),
  router.get('/donhang', async (req, res) => {
    try {
      const donhang = await Notify.notify.find(),
        donHangIsReadTrue = donhang
          .filter(d => !0 === d.isRead)
          .map(d => ({
            _id: d._id,
            tenkhach: d.tenkhach,
            phone: d.phone,
            email: d.email,
            address: d.address,
            tensp: d.tensp,
            price: d.price,
            date: moment(d.date).format('DD/MM/YYYY HH:mm:ss')
          })),
        donHangIsReadFalse = donhang
          .filter(d => !1 === d.isRead)
          .map(d => ({
            _id: d._id,
            tenkhach: d.tenkhach,
            phone: d.phone,
            email: d.email,
            address: d.address,
            tensp: d.tensp,
            price: d.price,
            date: moment(d.date).format('DD/MM/YYYY HH:mm:ss')
          }))
      res.render('donhang', {
        donHangIsReadTrue: donHangIsReadTrue,
        donHangIsReadFalse: donHangIsReadFalse
      })
    } catch (error) {
      console.error(error),
        res.status(500).json({ message: `Đã xảy ra lỗi: ${error}` })
    }
  }),
  router.post('/danhgia', async (req, res) => {
    try {
      const { tenkhach: tenkhach, content: content, rating: rating } = req.body,
        vietnamTime = momenttimezone().toDate(),
        danhgia = new DanhGia.danhgia({
          tenkhach: tenkhach,
          content: content,
          rating: rating,
          date: vietnamTime
        })
      await danhgia.save(), res.redirect('/')
    } catch (error) {
      console.error(error),
        res.status(500).json({ message: `Đã xảy ra lỗi: ${error}` })
    }
  }),
  router.get('/getdanhgia', async (req, res) => {
    try {
      const danhgia = await DanhGia.danhgia.find(),
        danhgiaIsReadTrue = danhgia
          .filter(d => !0 === d.isRead)
          .map(d => ({
            _id: d._id,
            tenkhach: d.tenkhach,
            content: d.content,
            rating: d.rating,
            date: moment(d.date).format('DD/MM/YYYY HH:mm:ss')
          })),
        danhgiaIsReadFalse = danhgia
          .filter(d => !1 === d.isRead)
          .map(d => ({
            _id: d._id,
            tenkhach: d.tenkhach,
            content: d.content,
            rating: d.rating,
            date: moment(d.date).format('DD/MM/YYYY HH:mm:ss')
          }))
      res.render('danhgia', {
        danhgiaIsReadTrue: danhgiaIsReadTrue,
        danhgiaIsReadFalse: danhgiaIsReadFalse
      })
    } catch (error) {
      console.error(error),
        res.status(500).json({ message: `Đã xảy ra lỗi: ${error}` })
    }
  }),
  router.post('/duyetdanhgia/:iddanhgia', async (req, res) => {
    try {
      const iddanhgia = req.params.iddanhgia,
        danhgia = await DanhGia.danhgia.findById(iddanhgia)
      ;(danhgia.isRead = !0), await danhgia.save(), res.redirect('/getdanhgia')
    } catch (error) {
      console.error(error),
        res.status(500).json({ message: `Đã xảy ra lỗi: ${error}` })
    }
  }),
  router.get('/contentBlog/:tieude', async (req, res) => {
    try {
      const tieude_blog = decodeURIComponent(req.params.tieude).replace(
          /-/g,
          ' '
        ),
        blog = await myMDBlog.blogModel.findOne({ tieude_blog: tieude_blog }),
        allsp = await LoaiSP.TenSP.find().populate('chitietsp')
      if (!blog) return res.status(404).json({ message: 'Blog không tồn tại' })
      const listBl = await myMDBlog.blogModel.find().sort({ _id: -1 }),
        content = blog.noidung.map(noidung => ({
          tieude: noidung.tieude,
          content: noidung.content.replace(/\\n/g, '<br>'),
          img: noidung.img || ''
        }))
      res.render('chitietblog', {
        content: content,
        tieude: blog.tieude_blog,
        listBl: listBl,
        image_blog: blog.img_blog,
        allsp: allsp
      })
    } catch (error) {
      console.error(error),
        res.status(500).json({ message: `Đã xảy ra lỗi: ${error}` })
    }
  }),
  router.post('/postblog', async (req, res) => {
    try {
      const {
          tieude_blog: tieude_blog,
          img: img,
          content: content,
          tieude: tieude,
          img_blog: img_blog
        } = req.body,
        blog = new myMDBlog.blogModel({
          tieude_blog: tieude_blog,
          img_blog: img_blog
        })
      if (Array.isArray(content) && Array.isArray(img) && Array.isArray(tieude))
        for (let i = 0; i < content.length; i++)
          blog.noidung.push({
            content: content[i],
            img: img[i],
            tieude: tieude[i]
          })
      else blog.noidung.push({ content: content, img: img, tieude: tieude })
      await blog.save(), res.redirect('/main')
    } catch (error) {
      console.error(error),
        res.status(500).json({ message: `Đã xảy ra lỗi: ${error}` })
    }
  }),
  router.get('/getaddblog', async (req, res) => {
    res.render('addblog')
  }),
  router.get('/getblog', async (req, res) => {
    try {
      const listBl = await myMDBlog.blogModel.find().sort({ _id: -1 })
      res.render('blog', { listBl: listBl })
    } catch (error) {
      console.error(error),
        res.status(500).json({ message: `Đã xảy ra lỗi: ${error}` })
    }
  }),
  router.get('/cart', async (req, res) => {
    res.render('cart')
  }),
  router.get('/checkout', async (req, res) => {
    res.render('checkout')
  }),
  router.get('/contact1', async (req, res) => {
    res.render('contact')
  }),
  router.get('/detail', async (req, res) => {
    res.render('detail')
  }),
  router.get('/clear-cache', async (req, res) => {
    try {
      redisClient.isOpen || redisClient.connect()
      const keys = await redisClient.keys('express-redis-cache:*')
      if (0 === keys.length) return res.send({ message: 'No cache keys found' })
      await redisClient.del(keys),
        res.send({ message: 'Cache cleared', numDeleted: keys.length })
    } catch (error) {
      console.log('Failed to clear cache', error),
        res.status(500).send({ error: 'Failed to clear cache' })
    }
  }),
  (module.exports = router)
